<!-- uploader component -->

<!--includes for this component -->
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<!--    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    -->

<script type="text/x-template" id="uploader-template">
    <div id="app" v-bind:value="value">
        <div class="container"> <!--UPLOAD-->
            <form enctype="multipart/form-data" novalidate v-if="(isInitial || isSaving) && !fileID">
                <div class="dropbox">
                    <input type="file" name="image" :disabled="isSaving"
                        @change="fileChange($event.target.name, $event.target.files);"
                        class="input-file"> <!-- accept="image/*" to limit to images only, but not foolproof-->
                    <p v-if="isInitial">
                        Drag your file here to begin<br> or click to browse
                    </p>
                    <p v-if="isSaving">
                        Uploading...
                    </p>
                </div>
            </form>

            <div v-if="fileID">
                <ul class="list-unstyled">
                    <li>
                        <img :src="imageURL" class="img-responsive img-thumbnail" :width="width">
                    </li>
                </ul>
                <p>
                    <button @click="reset()">Delete</button>
                </p>

            </div>
            <div v-if="isFailed"> <!--FAILED-->

                <h5>Uploader failed</h5>
                <p>
                    <button @click="reset()">Try again</button>
                </p>
                <pre>{{ uploadError }}</pre>
            </div>
        </div>
    </div>
</script>

<script>
const STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;
const BASE_URL = '/gallery';
Vue.component('uploader', {
    template: '#uploader-template',
    props: ['server', 'type', 'width', 'value'],
    data: function () {
        return {
            fileID: null,
            errors: [],
            currentStatus: null,
        }
    },
    watch: {
        value: function(newValue) {
            this.fileID = newValue;
        }
    },
    mounted: function () {
        this.reset();
        this.fileID = this.value;
    },
    computed: {
        imageURL: function() {
            if (this.fileID==null || this.fileID=='')
                return null;
            return `/gallery/${this.fileID}`;
            // return `${this.server}/${this.fileID}`;
        },
        isInitial: function () {
            return this.currentStatus === STATUS_INITIAL;
        },
        isSaving: function () {
            return this.currentStatus === STATUS_SAVING;
        },
        isSuccess: function () {
            return this.currentStatus === STATUS_SUCCESS;
        },
        isFailed: function () {
            return this.currentStatus === STATUS_FAILED;
        }
    },
    methods: {
        notifyParent() {
            this.$emit('input',this.fileID);
        },
        reset: function () {
            this.currentStatus = STATUS_INITIAL;
            this.fileID = null;
            this.uploadError = null;
            this.notifyParent();
        },
        fileChange: function (fieldName, fileList) {
            if (!fileList.length) return;
            var file = fileList[0];
            const formData = new FormData();
            formData.append(fieldName, file, file.name);
            this.currentStatus = STATUS_SAVING;
            axios.post(this.server, formData)
                .then(result => {
                    // const url = `${this.server}/${result.data.id}`;
                    console.log(`saved = ${JSON.stringify(result)}`);
                    this.fileID = `${this.type}/${result.data.id}` // image/<id> or RequirementAnswer/<id>
                    this.currentStatus = STATUS_SUCCESS;
                    this.notifyParent();
                })
                .catch(err => {
                    console.log(err);
                    this.errors = [err.response];
                    this.currentStatus = STATUS_FAILED;
                })
        }
    }
});
</script>


<style>
    .dropbox {
        outline: 2px dashed grey;
        /* the dash box */
        outline-offset: -10px;
        background: lightcyan;
        color: dimgray;
        padding: 10px 10px;
        min-height: 200px;
        /* minimum height */
        position: relative;
        cursor: pointer;
    }

    .input-file {
        opacity: 0;
        /* invisible but it's there! */
        width: 100%;
        height: 200px;
        position: absolute;
        cursor: pointer;
    }

    .dropbox:hover {
        background: lightblue;
        /* when mouse over to the drop zone, change color */
    }

    .dropbox p {
        font-size: 1.2em;
        text-align: center;
        padding: 50px 0;
    }
</style>
